<?php
/**
 * @file
 * Lazily load views.
 */

include_once 'lazy_views.views.inc';


/**
 * Implements hook_menu().
 */
function lazy_views_menu() {

  $items = array();

  $items['lazy-views/ajax'] = array(
    'title' => 'Lazy Views',
    'page callback' => 'lazy_views_ajax',
    'theme callback' => 'ajax_base_page_theme',
    'delivery callback' => 'ajax_deliver',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;

}

/**
 * Implements hook_library().
 *
 * Checks to see if the Library exists, and makes it available.
 *
 * @return
 *   Drupal Library definition for Spin.js
 */
function lazy_views_library() {

  $libraries = array();
  $libpath = libraries_get_path('spinjs');

  $libraries['spinjs'] = array(
    'title' => "Spin.js",
    'website' => 'http://fgnass.github.io/spin.js/',
    'version' => '2.0.1',
    'js' => array(
      $libpath . '/spin.min.js' => array(),
      $libpath . '/spin.jquery.min.js' => array(),
    ),
  );

  return $libraries;

}

/**
 * Implements hook_ctools_render_alter().
 *
 * If the lazy_views caching is configured on the view display, output an empty
 * placeholder and the javascript to lazy request the cached view output after
 * the initial page request. This technique helps to be able to cache anonymous
 * page output when the anonymous users are being presented different content
 * based on some factor. A good example is geolocation, where the anonymous
 * user's location may be inspected and, based on it, may be presented different
 * content.
 *
 * TODO: Consider moving this into the cache handler itself rather than relying
 *       on this post_render hook.
 */
function lazy_views_views_post_render(&$view, &$output, &$cache) {

  if (isset($cache->plugin_name) && $cache->plugin_name === 'lazy_views') {

    $base_cache_id = _lazy_views_strip_args($cache->_output_key);

    // Add the required javascript libraries for placeholder replacement unless
    // we are already within a lazy views request, in which case the libs and
    // are settings are already there.
    if (!_lazy_views_is_lazy_request()) {

      $module_path = drupal_get_path('module', 'lazy_views');

      drupal_add_library('system', 'drupal.ajax');
      drupal_add_library('lazy_views', 'spinjs');
      drupal_add_js($module_path . '/js/lazy-views.js');
      drupal_add_css($module_path . '/css/lazy-views.css');

      $arguments = array();

      foreach ($view->argument as $argument) {

        // These arguments are passed to the client side so that the view's
        // default argument/s can be retrieved when the view is lazy loaded. In
        // order to avoid caching problems when anonymous users are presented
        // the wrong content, the actual user-specific arguments can't be passed
        // to the client side. Instead, this passes the view's argument handler
        // type and options.
        // @see _lazy_views_get_view_arguments()
        $js_argument = new stdClass();
        $js_argument->options = array(
          'default_argument_type' => $argument->options['default_argument_type'],
          'default_argument_options' => array(
            'argument' => isset($argument->options['default_argument_options']['argument']) ? $argument->options['default_argument_options']['argument'] : '',
          ),
        );
        $arguments[] = $js_argument;

      }

      $settings = array(
        'lazy_views' => array(
          'current_path' => current_path(),
          'view_arguments' => array(
            $base_cache_id => $arguments,
          ),
        ),
      );

      drupal_add_js($settings, 'setting');

    }

    $placeholder_contents = array();

    if (!empty($cache->options['show_spinner'])) {

      $placeholder_contents['spinner'] = array(
        '#tag' => 'span',
        '#attributes' => array(
          'class' => array(
            'lazy-views-spinner',
          ),
        ),
        '#value' => '',
        '#theme' => 'html_tag',
      );

    }

    if (!empty($cache->options['show_text'])) {

      $placeholder_contents['load_text'] = array(
        '#tag' => 'p',
        '#attributes' => array(
          'class' => array(
            'lazy-views-text',
          ),
        ),
        '#value' => check_plain($cache->options['placeholder_text']),
        '#theme' => 'html_tag',
      );

    }

    $replace = array(
      '#tag' => 'div',
      '#attributes' => array(
        'data-lazy-views-cache-id' => $base_cache_id,
        'class' => array(
          'lazy-views-placeholder',
        ),
      ),
      '#value' => drupal_render($placeholder_contents),
      '#theme' => 'html_tag',
    );

    $output = drupal_render($replace);

  }

}

/**
 * Ajax callback for lazy-loading view output from cache.
 *
 * Inspects the request and loads the unprocessed view. Rebuilds the arguments
 * and loads the cache plugin to retrieve the cache id. Retrieves the view
 * output from cache and returns output from all view instances to the client
 * side for placement in the page.
 *
 * @return array
 *   Structured array for processing through ajax_render().
 */
function lazy_views_ajax() {

  if (!isset($_REQUEST['lazy_views_ids']) || !is_array($_REQUEST['lazy_views_ids'])) {
    return;
  }

  if (!isset($_REQUEST['lazy_views_current_path']) || !is_string($_REQUEST['lazy_views_current_path'])) {
    return;
  }

  // Check if the host path exists and the user has access to it. Otherwise bail out.
  $path = $_REQUEST['lazy_views_current_path'];

  if (!drupal_valid_path($path)) {
    return;
  }

  // Override the active path so that views behave as if they are in the host path.
  menu_set_active_item($path);

  // Flag the current request as being a lazy request.
  _lazy_views_is_lazy_request(TRUE);

  // Store the request uri for later use.
  _lazy_views_get_request_path($path);

  // Some views might use GET parameters present on the host page, such as a pager.
  // Given that Drupal AJAX Framework uses POST we merge the page params into the
  // super global $_GET so that modules such as views can use them for filters.
  $_GET += (!isset($_REQUEST['lazy_views_get']) || !is_array($_REQUEST['lazy_views_get'])) ? array() : $_REQUEST['lazy_views_get'];

  // Empty the POST data before rendering the views as it prevents displays
  // from using cache. See panels_set_cached_content() $_POST bailout.
  $stored_post = $_POST;
  $_POST = array();

  $view_arguments = array();

  foreach ($_REQUEST['lazy_views_arguments'] as $key => $argument) {

    foreach ($argument as $arg) {

      $object = new stdClass();
      $object->options = $arg['options'];

      $view_arguments[$key][] = $object;

    }

  }

  // Filter out non-lazy views cache ids and load them from the database.
  $cache_ids = $id_translation = array();

  foreach ($_REQUEST['lazy_views_ids'] as $id) {

    if (drupal_substr($id, 0, 10) === 'lazy_views') {

      // Load the unprocessed view from the generic cache id stored in the DOM.
      // Rebuild the arguments for the view, retrieve the view's cache plugin,
      // and get the cache id.
      $view = _lazy_views_get_view_from_cache_id($id);
      $view->args = _lazy_views_get_view_arguments($view, $view_arguments[$id]);
      $cache_plugin = $view->display_handler->get_plugin('cache');
      $id_with_args = $cache_plugin->get_output_key();
      $cache_ids[] = $id_with_args;
      $id_translation[$id_with_args] = $id;

    }
  }

  // Even in condition where admin selects 'never cache' as the cache length,
  // this will still retrieve the output from the cache for the purpose of
  // lazy-load. If lazy-load cache plugin is enabled at all an entry is stored
  // in the cache table. This simply ignores the cache expiry since for
  // lazy-load it's not a matter of pulling from cache OR building from scratch,
  // but rather should always pull from cache.
  $caches = cache_get_multiple($cache_ids, 'cache_views_data');

  $commands = array();

  foreach ($caches as $cache) {

    $output = $cache->data['output'];

    $commands[] = ajax_command_replace('[data-lazy-views-cache-id="' . $id_translation[$cache->cid] . '"]', $output);

  }

  // Restore the POST data before handling it for delivery. The function responsible
  // for the delivery - ajax_render() - requires the POST data to be present or
  // it won't inject the rendered views JS/CSS dependencies in the host page.
  $_POST = $stored_post;

  return array('#type' => 'ajax', '#commands' => $commands);

}

/**
 * Strips the arguments off the end of the cache id so that it can be sent to
 * the browser in a way that won't break caching for anonymous users.
 *
 * @param string $cache_id
 *   The cache id the view is using for storing the cached output.
 *
 * @return string
 *   The cache id with the last section containing the arguments removed.
 */
function _lazy_views_strip_args($cache_id) {

  return drupal_substr($cache_id, 0, strrpos($cache_id, ":"));

}

/**
 * Parses the views cache id and loads the view it belongs to.
 *
 * @param string $cache_id
 *   The cache id the view is using for storing the cached output.
 *
 * @return object
 *   An unprocessed view object.
 */
function _lazy_views_get_view_from_cache_id($cache_id) {

  $parts = explode(':', $cache_id);

  $view = views_get_view($parts[1]);
  $view->set_display($parts[2]);

  return $view;

}

/**
 * Retrieves the arguments for an unprocessed view.
 *
 * Given an unprocessed view and some metadata about the defined default
 * arguments, attempts to retrieve the actual arguments that were passed into
 * the view without having to fully re-process the view (which would result in
 * a performance impact for the lazy-loading technique).
 *
 * TODO: Need to test this method with all the different types of default
 *       arguments. If they can't be retrieved, then additional methods need to
 *       be created and exceptions added here (like smart_ip). If this is too
 *       cumbersome, then another method needs to be developed to get the view
 *       arguments. The exceptions might be best handled by invoking a hook that
 *       would give other modules access to modify the behavior.
 * TODO: Need to test and determine if this also can account for arguments that
 *       are passed in when not using a defined default argument. What happens
 *       when an argument value is passed in without using the default argument?
 *
 * @param object $view
 *   An unprocessed view object that does not yet have any arguments attached to
 *   it.
 * @param array $arguments
 *   Objects that describe the default argument type and default argument
 *   options used by this view display.
 *
 * @return array
 *   Arguments passed into the view.
 */
function _lazy_views_get_view_arguments($view, $arguments) {

  $view_arguments = array();

  // If the $view argument was set, the get_plugin method would be available.
  // Since the view is being loaded from scratch, there is no argument so this
  // method does not help. Instead must reconstruct the argument plugin by
  // directly instantiating the class in order to get the argument.
  // $plugin_definition = $view->argument['field_geo_restriction_iso2']->get_plugin('argument default');

  foreach ($arguments as $argument) {

    $this_arg = '';

    $class_name = 'views_plugin_argument_default_' . $argument->options['default_argument_type'];

    $default_argument_plugin = new $class_name();
    $default_argument_plugin->init($view, $this_arg, array());

    if ($argument->options['default_argument_type'] === 'smart_ip') {

      $default_argument_plugin->manual_init($argument);

    }

    $view_arguments[] = $default_argument_plugin->get_argument();

  }

  return $view_arguments;

}

/**
 * Checks if the current request has been originated from a lazy request.
 *
 * @param bool $status
 *  Sets the request status. Do not modify.
 * @return bool
 *  TRUE if the request has been originated from a lazy request, FALSE
 *  otherwise.
 */
function _lazy_views_is_lazy_request($status = NULL) {

  $lazy_request = &drupal_static(__FUNCTION__, FALSE);

  if (!empty($status) && is_bool($status)) {
    $lazy_request = $status;
  }

  return $lazy_request;

}

/**
 * Returns the lazy views host page path.
 *
 * @param string $path
 *  Sets the lazy views request path. Do not modify.
 * @return string
 *  The lazy views request path, or an empty string if not set.
 */
function _lazy_views_get_request_path($path = NULL) {

  $request_path = &drupal_static(__FUNCTION__, '');

  if (!empty($path) && is_string($path)) {
    $request_path = $path;
  }

  return $request_path;

}



